#!/usr/bin/python
# -*- coding: utf-8 -*-

import re, sys, time, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

try: from lib import preload
except:
    print "E: Can't connect to library!"
    sys.exit()

import pwikipedia as pywikibot, pagegenerators, catlib, userlib, category
from lib.libservice import service

patName = re.compile(ur"(?<=:)(?!.*:).*(?=\]\])")

def domove(source, dest):
    pywikibot.output(u"Move from " + source + u" to " + dest)
    source = patName.search(source).group()
    dest = patName.search(dest).group()
    robot = category.CategoryMoveRobot(source, dest, batchMode = True,
        editSummary = conf.summary, inPlace = False, titleRegex = None, withHistory = False)
    robot.run()
    pageCat = pywikibot.Page(site, u"หมวดหมู่:" + source)
    content = pageCat.get()
    content = re.sub(ur"(\{\{speedydelete.*?\}\})", r"\1", content)
    pageCat.put(content, conf.summary, force = True)

def verify(name):
    user = userlib.User(pywikibot.getSite(), name)
    if not user.isRegistered(): return False
    if user.editCount() < conf.minEditCount: return False
    if user.isBlocked(): return False
    if(int(time.strftime("%Y%m%d%H%M%S", time.gmtime())) - \
        int(user.registrationTime()) < conf.minTime): return False
    return True

def appendTable(title, arr):
    if not arr: return    
    page = pywikibot.Page(site, title)
    text = page.get()
    text = re.sub(ur"(?m)^\|\}", u"\n".join(arr) + u"\n|}", text)
    page.put(text, conf.summary + preload.getTime())

def main():
    if conf.pendingParam in args:
        pywikibot.output(u"move pending entry")
        pageprocess = conf.pageMinor
        operation = u"minor"
    else:
        pageprocess = conf.pageMajor
        operation = u"major"
    
    header, table, disable = service(serviceTitle=pageprocess,
                                operation=operation,
                                verifyFunc=verify,
                                datwiki=conf.datwiki,
                                site=site,
                                summary=conf.summary)
    
    report = []
    pending = []
    
    for i, line in enumerate(table):
        putline = u"|-\n| " + u" || ".join(line)
        if (operation == u"minor") or (not disable[i]):
            try:
                domove(line[1], line[2])
                templateStat = u"{{done}}"
            except:
                preload.error()
                templateStat = u"{{not done}"
            report.append(putline + u" || " + templateStat + u" " + preload.getTime())
        else:
            pending.append(putline)
    
    appendTable(conf.pageReport, report)
    appendTable(conf.pageMinor, pending)

if __name__ == "__main__":
    args, site, conf = preload.pre(u"move category automatically", lock = True)
    try: main()
    except: preload.posterror()
    preload.post()
