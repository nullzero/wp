#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Service to move category automatically. There are two modes in running;
major and minor.

Major mode will look for each request at pageMajor and perform it if
requester passes qualification. If not, the script will append that
request to pageMinor. This mode should be executed periodically.

Minor mode will perform every request in pageMinor without qualifying.
This mode should be executed manually and deliberately. It can be
activated by running script with parameter "pending"
(can use alternative word by changing variable 'pendingParam')

Requirement:
    servicePath:    Main page's prefix
    pageMajor:      Page that customer will leave their requests.
    pageMinor:      Page that unqualified automatically request will
                    be kept.
    datwiki:        Page that keep id of last revision. To prevent
                    vandalism on this page, the page should be local
                    javascript (end with .js) so that there are only
                    page owner and administrator that can change that
                    page.

    Don't give fullpath to pageMajor, pageMinor, and datwiki! The script
    will obtain the actual path by concatenating servicePath's value and
    their values together.

    minEditCount:   Edit count constraint for qualifying user.
    minTime:        Membership duration constraint for qualifying user.
"""

__version__ = "2.0.1"
__author__ = "Sorawee Porncharoenwase"

import sys, time, os
sys.path.append(os.path.abspath("../.."))
from lib import preload
import pwikipedia as pywikibot, pagegenerators, catlib, userlib, category
from lib.libservice import service
from lib import libservice, re2

def _debug():
    NotImplemented

def glob():
    global patName, patEndTable, patTagDel
    patName = re2.re2(ur"(?<=:)(?!.*:).*(?=\]\])")
    patEndTable = re2.re2(ur"(?m)^\|\}")
    patTagDel = re2.re2(ur"(?s).*(\{\{speedydelete.*?\}\}).*")

def summaryWithTime():
    return conf.summary + u" @ " + preload.getTime()

def domove(source, dest):
    """
    To move a category. If bot hasn't administrator privilege,
    it will tag speedydelete tag and clear content to prevent
    interwikibot add interwiki link wrongly.
    """
    pywikibot.output(u"Move from " + source + u" to " + dest)
    source = patName.find(source)
    dest = patName.find(dest)
    robot = category.CategoryMoveRobot(source, dest, batchMode=True,
                                        editSummary=None, inPlace=False,
                                        titleRegex=None, withHistory=False)
    # editSummary=None to force library put default summary automatically
    robot.run()
    pageCat = pywikibot.Page(site, u"Category:" + source)
    try:
        content = pageCat.get()
    except NoPage:
        return
    else:
        pageCat.put(patTagDel.sub(u"{{bots|allow=Nullzerobot}}\n\\1", content),
                    conf.summary)

def verify(name):
    """Verify a username whether he is reliable."""
    user = userlib.User(pywikibot.getSite(), name)
    if not user.isRegistered():
        return False
    if user.editCount() < conf.minEditCount:
        return False
    if user.isBlocked():
        return False
    nowTime = int(time.strftime("%Y%m%d%H%M%S", time.gmtime()))
    regTime = int(user.registrationTime())
    if(nowTime - regTime < conf.minTime):
        return False
    return True

def appendTable(title, arr):
    """Append data to a table."""
    if not arr:
        return
    page = pywikibot.Page(site, title)
    page.put(patEndTable.sub(u"\n".join(arr) + u"\n|}", page.get()),
            summaryWithTime())

def main():
    """Main function"""
    if conf.pendingParam in args:
        pywikibot.output(u"move pending entry")
        pageprocess = conf.pageMinor
        operation = u"minor"
    else:
        pageprocess = conf.pageMajor
        operation = u"major"

    header, table, disable = libservice.service(serviceTitle=pageprocess,
                                                operation=operation,
                                                verifyFunc=verify,
                                                datwiki=conf.datwiki,
                                                site=site,
                                                summary=summaryWithTime)

    report = []
    pending = []

    for i, line in enumerate(table):
        putline = u"|-\n| " + u" || ".join(line)
        if (operation == u"minor") or (not disable[i]):
            try:
                domove(line[1], line[2])
                templateStat = conf.doneTemplate
            except:
                preload.error()
                templateStat = conf.notDoneTemplate
            putline += u" || " + templateStat + u" " + preload.getTime()
            report.append(putline)
        else:
            pending.append(putline)

    appendTable(conf.pageReport, report)
    appendTable(conf.pageMinor, pending)

if __name__ == "__main__":
    args, site, conf = preload.pre(u"move category automatically", lock = True)
    try:
        glob()
        main()
    except:
        preload.posterror()
    else:
        preload.post()
