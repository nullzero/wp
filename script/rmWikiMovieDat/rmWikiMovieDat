#!/usr/bin/python
# -*- coding: utf-8 -*-

import re, sys, os
sys.path.append(os.path.abspath("../.."))
from lib import preload
from lib import libcleaner, libgenerator, re2
import pwikipedia as pywikibot

def _debug():
    NotImplemented
    
def glob():
    global patWikitable, patRowspan, patHeaderStyle
    patWikitable = re2.re2(ur"(?s)\{\|.*?wikitable.*?\|\}")
    patRowspan = re2.re2(ur"rowspan\ *=\ *\"(.*?)\"")
    patHeaderStyle = re2.re2(ur"^.*?\|")

def extractHeader(s):
    s = patHeaderStyle.sub(u"", s.strip())
    w = re2.patWikilink.find(s)
    return w if w else s

def dochange(original_content):
    content = original_content
    tablelist = patWikitable.findall(content)

    for table in tablelist:
        # use to handle error in each table
        try:
            column = []
            stable = [[None for i in range(conf.maxn)]
                                for j in range(conf.maxn)]
            lock = [[False for i in range(conf.maxn)]
                                for j in range(conf.maxn)]
            mark = [None for i in range(conf.maxn)]
            skipThisTable = False
            startOperation = False
            pre, post = content.split(table)
            lines = table.splitlines()
            lines = map(lambda line: u"|-" if line.strip().startswith(u"|-")
                                            else line, lines)
            table = u"\n".join(lines)
            table = table.replace(u"||", u"\n|")
            table = table.replace(u"!!", u"\n!")
            lines = table.splitlines()
            i, j = -1, 0
            for line in lines:
                line = line.strip()
                if line.startswith(u"|-"):
                    if startOperation:
                        i += 1
                        j = 0
                elif line.startswith(u"|}"):
                    break
                elif line.startswith(u"!"):
                    startOperation = True
                    column.append(extractHeader(line[1:]))
                elif line.startswith(u"|"):
                    while lock[i][j]:
                        j += 1
                    text = line[1:].strip()
                    result = patRowspan.search(text)
                    if result:
                        rowspan = result.group(1)
                        print ">>>", result.group()
                        print ">>>", rowspan
                        for k in xrange(i + 1, i + int(rowspan)):
                            lock[k][j] = True

                    stable[i][j] = text
                    j += 1

            n = i + 1
            cntfound = 0
            for idx, val in enumerate(conf.keepcolumn):
                vlist, vstr, vstrict = val
                found = False
                for idx2, val2 in enumerate(column):
                    if (val2 == vstr) or (val2 in vlist):
                        mark[idx] = idx2
                        found = True
                        cntfound += 1
                        break

                if (not found) and (vstrict):
                    skipThisTable = True
                    break

            if (skipThisTable) or (cntfound == len(column)):
                continue
            output = u'{| class="wikitable"\n|-\n! '
            for i, v in enumerate(conf.keepcolumn):
                if mark[i] is not None:     # don't use if mark[i]:
                    output += v[1] + u" !!" # because mark[i] might equal to 0
            output = output[:-2] + u"\n"
            for i in xrange(n):
                output += u"|-\n"
                output += u"| "
                for j in xrange(len(conf.keepcolumn)):
                    if (mark[j] is not None) and stable[i][mark[j]]:
                        output += stable[i][mark[j]] + u" ||"
                if output != u"":
                    output = output[:-3] + u"\n"
            output += u"|}"

            content = pre + output + post
        except:
            preload.error()

    if content != original_content:
        return libcleaner.clean(content)

def main():
    if args:
        gen = [pywikibot.Page(site, pagename) for pagename in args]
    else:
        gen = libgenerator.CatGenerator(conf.catname)

    for page in gen:
        pywikibot.output(page.title())
        # use to handle error in each page
        try:
            ocontent = page.get()
            content = dochange(ocontent)
            if content and (ocontent != content):
                pywikibot.showDiff(ocontent, content)
                page.put(content, conf.summary)
        except:
            preload.error()

if __name__ == "__main__":
    args, site, conf = preload.pre(u"remove unnecessary data "
                                    "in actor articles")
    try:
        #_debug()
        glob()
        main()
    except:
        preload.posterror()
    else:
        preload.post()
