#!/usr/bin/python
# -*- coding: utf-8 -*-
"""Notify user that link a link to disambiguous page."""

__version__ = "2.0.1"
__author__ = "Sorawee Porncharoenwase"

import sys, os, difflib
sys.path.append(os.path.abspath("../.."))
from lib import preload
from lib import libdate
import pwikipedia as pywikibot

def glob():
    global container
    container = {}

def dict2str(d):
    s = u""
    for title in d:
        s += u"; [[" + title + u"]]\n"
        s += "".join(map(lambda x: u"* [[" + x + u"]]\n", d[title]))
    return s

def notify(user, dic, insertDisamT):
    pywikibot.output(u"notifying %s..." % user)
    if user in conf.exceptionList:
        return
    usertalk = pywikibot.Page(site, u"User talk:" + user)
    
    for title, linkset in dic.items():
        pagenow = pywikibot.Page(site, title)
        if pagenow.exists():
            alllinks = [link.title() for link in pagenow.linkedPages()]
            dic[title] = filter(lambda link: link in alllinks, list(linkset))
        else:
            dic[title] = []
            
        if not dic[title]:
            del dic[title]
            
    if not dic:
        return
    
    scontent = dict2str(dic)
    message = insertDisamT
    message = message.replace(conf.linkPlaceholder, scontent)
    message = message.replace(conf.userPlaceholder, user)
    message = message.replace(conf.datePlaceholder, "%d/%d" % 
                        (libdate.date.today().day, libdate.date.today().month))
    
    try:
        usertalk.put(u"%s\n\n%s --~~~~" % (usertalk.get(), message),
                                            conf.summary)
    except:
        preload.error()
    
    pywikibot.output(u">>> done!")

def _debug():
    container[u"Jbot"] = {}
    container[u"Jbot"][u"A"] = set()
    container[u"Jbot"][u"A"].add(u"อักษรภาพ")
    container[u"Jbot"][u"A"].add(u"วัว")
    container[u"Jbot"][u"A"].add(u"nonexist")
    container[u"Jbot"][u"Z"] = set()
    container[u"Jbot"][u"Z"].add(u"nonexist")
    container[u"Jbot"][u"Z"].add(u"nonexist!")
    notify(u"Jbot", container[u"Jbot"],
            pywikibot.Page(site, conf.messageTemplate).get())

def save(user, title, links):
    pywikibot.output(u">>> save %s %s" % (user, title))
    global container
    if user in container:
        if title in container[user]:
            container[user][title] |= links
        else:
            container[user][title] = links
    else:
        container[user] = {}
        container[user][title] = links
    
def flush():
    insertDisamT = pywikibot.Page(site, conf.messageTemplate).get()
    for user in container:
        notify(user, container[user], insertDisamT)

def check(revision):
    page = revision[0]
    pywikibot.output(u"check page %s @ %s" % (page.title(), preload.getTime()))
    revid = revision[1]["revid"]
    oldrevid = revision[1]["old_revid"]
    
    try:
        contentnew = page.get()
    except IsRedirectPage:
        return
        
    contentold = u""
    
    if oldrevid != 0:
        try:
            contentold = page.getOldVersion(oldrevid)
        except:
            pass
        
    addedlinks = (set(pywikibot.extractLinkedPages(contentnew, page)) -
                set(pywikibot.extractLinkedPages(contentold, page)))
    
    disamlinks = []
    
    for link in addedlinks:
        if u":" in link.title():
            continue
        if link.title().startswith(u"#"):
            continue
        try:
            lname = link.title()
            if link.isRedirectPage():
                link = link.getRedirectTarget()
            if link.isDisambig():
                disamlinks.append(lname)
        except:
            preload.error()
    
    if len(disamlinks) != 0:
        save(revision[1]["user"], revision[1]["title"], set(disamlinks))
    
def main():
    global container
    gen = site.recentchanges(number=conf.startChecking,
            rcshow=["!redirect", "!bot"],
            namespace="|".join([str(x) for x in xrange(0, 16, 2) if x != 2]),
            repeat=True,
            returndict=True)
            
    todaynum = libdate.date.today().day
    for revision in gen:
        try:
            check(revision)
            if todaynum != libdate.date.today().day:
                flush()
                container = {}
                todaynum = libdate.date.today().day
        except:
            preload.error()

if __name__ == "__main__":
    args, site, conf = preload.pre(u"notify linking to disambigous page",
                                    lock=True)
    try:
        #_debug()
        glob()
        main()
    except:
        preload.posterror()
    else:
        preload.post()
