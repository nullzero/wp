#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, re, os
sys.path.append(os.path.abspath("../.."))
from lib import preload
from lib import libgenerator, libstring
import pwikipedia as pywikibot

def _debug():
    NotImplemented

def main():
    tlpat = re.compile(ur"\{\{\s*(" + u"|".join(conf.template) + ur")\s*\}\}")
    patlist = []
    patlist.append((ur"\s+", u" "))
    # delete all spaces
    patlist.append((ur"(?s)\{\|.*?\|\}", u""))
    # delete all tables.
    patlist.append((ur"(?s)<ref.*?</ref>", u""))
    # delete all references
    patlist.append((ur"(?s)(?<!\[)\[(?!\[).*?\]", u""))
    # delete all external/internal links
    patreplist = []
    patreplist.append((ur"(?s)\{\{(?:(?!\{\{|\}\}).)*\}\}", u""))
    # delete all templates.
    
    for i, j in enumerate(patlist):
        patlist[i] = (re.compile(j[0]), j[1])
    
    for i, j in enumerate(patreplist):
        patreplist[i] = (re.compile(j[0]), j[1])
        
    for page in libgenerator.CatGenerator(conf.catname):
        original_content = page.get(get_redirect = True)
        content = original_content
        content = pywikibot.removeCategoryLinks(content)
        content = pywikibot.removeLanguageLinks(content)
        for pat in patlist:
            content = pat[0].sub(pat[1], content)
        
        for pat in patreplist:
            content = libstring.repSub(pat[0], pat[1], content)
            
        pywikibot.output(u"%s : %d" % (page.title(), len(content)))
        if len(content) >= 1000:
            pywikibot.output(u">>> The text is not short now.")
            content = tlpat.sub(u"", original_content)
            if content != original_content:
                page.put(content, conf.summary)

if __name__ == "__main__":
    args, site, conf = preload.pre(u"remove veryshort tag", lock = True)
    try:
        #_debug()
        main()
    except:
        preload.posterror()
    else:
        preload.post()
