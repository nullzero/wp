#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, os
sys.path.append(os.path.abspath("../.."))
from lib import preload
from lib import libgenerator, re2
import pwikipedia as pywikibot

def _debug():
    NotImplemented

def main():
    tlpat = re2.re2(ur"\{\{\s*" + re2.sep(conf.template) + ur"\s*\}\}")
    patlist = re2.subst()
    patlist.append((ur"\s+", u" "))
    # delete all spaces
    patlist.append((ur"(?s)\{\|.*?\|\}", u""))
    # delete all tables.
    patlist.append((ur"(?s)<ref.*?</ref>", u""))
    # delete all references
    patlist.append((ur"(?s)(?<!\[)\[(?!\[).*?\]", u""))
    # delete all external/internal links
    patreplist = re2.subst()
    patreplist.append((ur"(?s)\{\{(?:(?!\{\{|\}\}).)*\}\}", u""))
    # delete all templates.
        
    for page in libgenerator.CatGenerator(conf.catname):
        original_content = page.get(get_redirect = True)
        content = original_content
        content = pywikibot.removeCategoryLinks(content)
        content = pywikibot.removeLanguageLinks(content)
        content = patlist.do(content)
        content = patreplist.do(content, rep=True)
            
        pywikibot.output(u"%s : %d" % (page.title(), len(content)))
        if len(content) >= 1000:
            pywikibot.output(u">>> The text is not short now.")
            content = tlpat.sub(u"", original_content)
            if content != original_content:
                page.put(content, conf.summary)

if __name__ == "__main__":
    args, site, conf = preload.pre(u"remove veryshort tag", lock = True)
    try:
        #_debug()
        main()
    except:
        preload.posterror()
    else:
        preload.post()
