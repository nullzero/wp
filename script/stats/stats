#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, os, re
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

try: from lib import preload
except:
    print "เรียกใช้ไลบรารีไม่ได้ จบการทำงาน!"
    sys.exit()

from lib import libdata
import pwikipedia as pywikibot, query, userlib

INF = 999999999

pageMain = pywikibot.Page(site, u"วิกิพีเดีย:ที่สุดในวิกิพีเดียภาษาไทย")
contentMain = pageMain.get()

def firstContributor(title):
    name = pywikibot.Page(site, title).getCreator()[0]
    if userlib.User(site, name).isAnonymous(): return u"-"
    return u"[[User:%s|%s]]" % (name, name)

def pagestat(): 
    allpages = libdata.LimitedSortedList(lambda a, b: b[0] - a[0])
    for page in site.allpages(includeredirects = False):
        print ">>>", page.title()
        allpages.append((page.quickCntRev(), page.title()))
    return allpages.get()

def getdat(title):
    s = re.search(u"<!-- เริ่มตาราง%s -->(.*?)<!-- จบตาราง%s -->" % 
        (title, title), contentMain, flags = re.DOTALL).group(1)
    s = [x.strip() for x in s.split(u"|-")]
    table = []
    for line in s:
        line = line.strip()
        if line.startswith(u"|}"): break
        if not line.startswith(u"|"): continue
        table.append([x.strip() for x in line.split(u"||")])
    
    for i in xrange(len(table)):
        table[i][0] = re.search(u"\[\[(.*?)\]\]", table[i][0]).group(1)
    
    return table

def tag(x):
    if x == 0: return u"{{คงที่}}"
    if x < 0: return u"{{ขึ้น}}"
    return u"{{ลง}}"

def writetable(table, title):
    global contentMain
    for i in xrange(len(table)):
        table[i][0] = u"%s %d. [[%s]]" % (tag(i + 1 - table[i][1]), i + 1, table[i][0])
        if table[i][1] == INF: table[i][1] = u"มาใหม่"
        table[i] = u" || ".join([unicode(x) for x in table[i]])
    contentMain = re.sub(u"(?<=<!-- เริ่มตาราง%s -->).*?(?=<!-- จบตาราง%s -->)" % (title, title),
        u"".join(map(lambda x: u"\n|-\n| " + x, table)) + u"\n|}\n{{hatnote|ปรับปรุง %s}}\n" % preload.getTime(),
        contentMain, flags = re.DOTALL)

def flush():
    pageMain.put(contentMain, u"ปรับปรุงรายการ")

def getrankold(title, table):
    for i, val in enumerate(table):
        if val[0] == title:
            return i + 1
    return INF
    
def getconf(s):
    return re.search(u"<!-- %s \{(.*?)\} -->" % s, contentMain).group(1)

def main():
    """
    most edits
    """
    allpages = pagestat()
    oldtable = getdat(u"บทความแก้ไขมากสุด")
    oldtablelist = getdat(u"บทความรายชื่อแก้ไขมากสุด")
    table = []
    tablelist = []
    ptr = 0
    while True:
        if (len(tablelist) < 5) and ((u"รายชื่อ" in allpages[ptr][1]) or (u"รายนาม" in allpages[ptr][1])):
            rankold = getrankold(allpages[ptr][1], oldtablelist)
            tablelist.append([allpages[ptr][1], rankold, allpages[ptr][0], firstContributor(allpages[ptr][1])])
            ptr += 1
        elif len(table) < 10:
            rankold = getrankold(allpages[ptr][1], oldtable)
            table.append([allpages[ptr][1], rankold, allpages[ptr][0], firstContributor(allpages[ptr][1])])
            ptr += 1
        elif (len(tablelist) < 5) or (len(table) < 10):
            ptr += 1
        else:
            break
            
    writetable(table, u"บทความแก้ไขมากสุด")
    writetable(tablelist, u"บทความรายชื่อแก้ไขมากสุด")
    """
    long pages
    """
    table = []
    oldlongpages = getdat(u"บทความยาวสุด")
    for page, length in site.longpages(5):
        table.append([page.title(), getrankold(page.title(), oldlongpages), length])
    writetable(table, u"บทความยาวสุด")
    """
    most edits (user)
    """
    oldusers = getdat(u"ชาววิกิพีเดียที่เขียนมากที่สุด")
    limit = getconf(u"ตารางชาววิกิพีเดียที่เขียนมากที่สุด")
    table = []
    for line in pywikibot.Page(site, u"วิกิพีเดีย:รายชื่อชาววิกิพีเดียที่แก้ไขมากที่สุด_500_อันดับ").get().split("\n"):
        libe = line.strip()
        if line == u"|-": continue
        if line.startswith(u"|"):
            line = [x.strip() for x in line.split(u"||")]
            name = re.search(u"\[\[(.*?)\]\]", line[1]).group(1)
            cnt = re.search(u"\|(\d+)\]\]", line[2]).group(1)
            if int(cnt) < int(limit): break
            table.append([name, getrankold(name, oldusers), cnt])
    writetable(table, u"ชาววิกิพีเดียที่เขียนมากที่สุด")
    flush()

if __name__ == "__main__":
    args, site = preload.pre(u"ปรับปรุงสถิติทั่วไป")
    try: main()
    except: preload.posterror()
    preload.post()
